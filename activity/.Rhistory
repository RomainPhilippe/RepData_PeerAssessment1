spread(name, grade) %>%
print
submit()
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE)
# This script builds on the previous one by appending
# a call to spread(), which will allow us to turn the
# values of the test column, midterm and final, into
# column headers (i.e. variables).
#
# You only need to specify two arguments to spread().
# Can you figure out what they are? (Hint: You don't
# have to specify the data argument since we're using
# the %>% operator.
#
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(class, grade) %>%
print
submit()
# This script builds on the previous one by appending
# a call to spread(), which will allow us to turn the
# values of the test column, midterm and final, into
# column headers (i.e. variables).
#
# You only need to specify two arguments to spread().
# Can you figure out what they are? (Hint: You don't
# have to specify the data argument since we're using
# the %>% operator.
#
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(class, name) %>%
print
submit()
# This script builds on the previous one by appending
# a call to spread(), which will allow us to turn the
# values of the test column, midterm and final, into
# column headers (i.e. variables).
#
# You only need to specify two arguments to spread().
# Can you figure out what they are? (Hint: You don't
# have to specify the data argument since we're using
# the %>% operator.
#
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(class, -grade) %>%
print
submit()
# This script builds on the previous one by appending
# a call to spread(), which will allow us to turn the
# values of the test column, midterm and final, into
# column headers (i.e. variables).
#
# You only need to specify two arguments to spread().
# Can you figure out what they are? (Hint: You don't
# have to specify the data argument since we're using
# the %>% operator.
#
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE)
skip()
extract_numeric("class5")
?extract_numeric
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade)
# We want the values in the class columns to be
# 1, 2, ..., 5 and not class1, class2, ..., class5.
#
# Use the mutate() function from dplyr along with
# extract_numeric(). Hint: You can "overwrite" a column
# with mutate() by assigning a new value to the existing
# column instead of creating a new column.
#
# Check out ?mutate and/or ?extract_numeric if you need
# a refresher.
#
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>% mutate(class= extract_numeric(class))
### Call to mutate() goes here %>%
print
?overwrite
??overwrite
?mutate
# We want the values in the class columns to be
# 1, 2, ..., 5 and not class1, class2, ..., class5.
#
# Use the mutate() function from dplyr along with
# extract_numeric(). Hint: You can "overwrite" a column
# with mutate() by assigning a new value to the existing
# column instead of creating a new column.
#
# Check out ?mutate and/or ?extract_numeric if you need
# a refresher.
#
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>% mutate(new= extract_numeric(class))
### Call to mutate() goes here %>%
print
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade)
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>% mutate(class= extract_numeric(class))
submit()
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>% mutate(class= extract_numeric(class))
### Call to mutate() goes here %>%
print
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>% mutate(class= extract_numeric(class))
print
# a refresher.
#
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
### Call to mutate() goes here %>%
mutate(class= extract_numeric(class))
print
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
### Call to mutate() goes here %>%
mutate(class= extract_numeric(class))
# We want the values in the class columns to be
# 1, 2, ..., 5 and not class1, class2, ..., class5.
#
# Use the mutate() function from dplyr along with
# extract_numeric(). Hint: You can "overwrite" a column
# with mutate() by assigning a new value to the existing
# column instead of creating a new column.
#
# Check out ?mutate and/or ?extract_numeric if you need
# a refresher.
#
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
### Call to mutate() goes here %>%
mutate(class= extract_numeric(class)) %>%
print
submit()
students4
# Complete the chained command below so that we are
# selecting the id, name, and sex column from students4
# and storing the result in student_info.
#
student_info <- students4 %>%
select(id, name, sex) %>%
print
submit()
student_info <- students4 %>%
select(id, name, sex) %>%
### Your code here %>%
unique()
%>% print
# Add a call to unique() below, which will remove
# duplicate rows from student_info.
#
# Like with the call to the print() function below,
# you can omit the parentheses after the function name.
# This is a nice feature of %>% that applies when
# there are no additional arguments to specify.
#
student_info <- students4 %>%
select(id, name, sex) %>%
### Your code here %>%
unique() %>% print
submit()
# Add a call to unique() below, which will remove
# duplicate rows from student_info.
#
# Like with the call to the print() function below,
# you can omit the parentheses after the function name.
# This is a nice feature of %>% that applies when
# there are no additional arguments to specify.
#
student_info <- students4 %>%
select(id, name, sex) %>%  unique() %>% print
submit()
# select() the id, class, midterm, and final columns
# (in that order) and store the result in gradebook.
#
gradebook <- students4 %>% select(id, class,midterm,final) %>% print
submit()
# select() the id, class, midterm, and final columns
# (in that order) and store the result in gradebook.
#
gradebook <- students4 %>% select(id, class,midterm,final) %>% print
submit()
passed
passed
failed
mutate(passed,status=passed)
passed
passed <- passed %>% mutate(status = "passed")
failed <- failed %>% mutate(status = "failed")
bind_rows(failed,passed)
bind_rows(passed,failed)
sat
sat %>%
select(-contains("total")) %>%
gather(part_sex,count, -score_range)
#
sat %>%
select(-contains("total")) %>%
gather(part_sex,count, -score_range) %>%
separate(part,sex) %>%
print
sat %>%
select(-contains("total"))
sat %>%
select(-contains("total")) %>%
gather(part_sex,count, -score_range)
?separate
sat %>%
select(-contains("total")) %>%
gather(part_sex,count, -score_range) %>%
separate(part,sex)
sat %>%
select(-contains("total")) %>%
gather(part_sex,count, -score_range) %>%
separate(part_sex,part,sex) %>%
print
#
sat %>%
select(-contains("total")) %>%
gather(part_sex,count, -score_range) %>%
separate(part_sex,part,sex,sep="_")
# Accomplish the following three goals:
#
# 1. select() all columns that do NOT contain the word "total",
# since if we have the male and female data, we can always
# recreate the total count in a separate column, if we want it.
# Hint: Use the contains() function, which you'll
# find detailed in 'Special functions' section of ?select.
#
# 2. gather() all columns EXCEPT score_range, using
# key = part_sex and value = count.
#
# 3. separate() part_sex into two separate variables (columns),
# called "part" and "sex", respectively. You may need to check
# the 'Examples' section of ?separate to remember how the 'into'
# argument should be phrased.
#
sat %>%
select(-contains("total")) %>%
gather(part_sex,count, -score_range) %>%
separate(part_sex,part,sex) %>%
print
#
sat %>%
select(-contains("total")) %>%
gather(part_sex,count, -score_range) %>%
separate(part_sex) %>%
print
# Accomplish the following three goals:
#
# 1. select() all columns that do NOT contain the word "total",
# since if we have the male and female data, we can always
# recreate the total count in a separate column, if we want it.
# Hint: Use the contains() function, which you'll
# find detailed in 'Special functions' section of ?select.
#
# 2. gather() all columns EXCEPT score_range, using
# key = part_sex and value = count.
#
# 3. separate() part_sex into two separate variables (columns),
# called "part" and "sex", respectively. You may need to check
# the 'Examples' section of ?separate to remember how the 'into'
# argument should be phrased.
#
sat %>%
select(-contains("total")) %>%
gather(part_sex,count, -score_range) %>%
separate(part_sex, c("part", "sex")) %>%
print
submit()
# Accomplish the following three goals:
#
# 1. select() all columns that do NOT contain the word "total",
# since if we have the male and female data, we can always
# recreate the total count in a separate column, if we want it.
# Hint: Use the contains() function, which you'll
# find detailed in 'Special functions' section of ?select.
#
# 2. gather() all columns EXCEPT score_range, using
# key = part_sex and value = count.
#
# 3. separate() part_sex into two separate variables (columns),
# called "part" and "sex", respectively. You may need to check
# the 'Examples' section of ?separate to remember how the 'into'
# argument should be phrased.
#
sat %>%
select(-contains("total")) %>%
gather(part_sex, count, -score_range) %>%
separate(part_sex, c("part", "sex")) %>%
print
submit()
# Append two more function calls to accomplish the following:
#
# 1. Use group_by() (from dplyr) to group the data by part and
# sex, in that order.
#
# 2. Use mutate to add two new columns, whose values will be
# automatically computed group-by-group:
#
#   * total = sum(count)
#   * prop = count / total
#
sat %>%
select(-contains("total")) %>%
gather(part_sex, count, -score_range) %>%
separate(part_sex, c("part", "sex")) %>%
group_by(part, sex) %>%
mutate(total = sum(count),
prop = count / total
) %>% print
submot()
submit()
# Append two more function calls to accomplish the following:
#
# 1. Use group_by() (from dplyr) to group the data by part and
# sex, in that order.
#
# 2. Use mutate to add two new columns, whose values will be
# automatically computed group-by-group:
#
#   * total = sum(count)
#   * prop = count / total
#
sat %>%
select(-contains("total")) %>%
gather(part_sex, count, -score_range) %>%
separate(part_sex, c("part", "sex")) %>%
group_by(part, sex) %>%
mutate(total = sum(count),
prop = count / total
) %>% print
submit()
setwd("C:/Users/Roro7_000/Documents/MOOC/Reproducible research/Project1/RepData_PeerAssessment1/activity")
activity<-read.csv('activity.csv',stringsAsFactors=F)
dfActivity<-as.data.frame(activity)
str(dfActivity)
dfActivityClean<-dfActivity[complete.cases(dfActivity),]
head(dfActivityClean)
dfActivityClean$date <- as.Date(format(dfActivityClean$date, format="%Y-%m-%d"))
library(plyr)
totalStepsByDay<-ddply(dfActivityClean, .(date), summarize, total=sum(steps))
totalStepsByDay$total<-as.numeric(totalStepsByDay$total)
totalStepsByDay$Source<-'NOT NA'
totalStepsByDay
library(ggplot2)
ggplot(data=totalStepsByDay, aes(x = factor(date), y =total)) + geom_histogram(stat = "identity")
ggplot(data=totalStepsByDay, aes(x = factor(date), y =total)) + geom_histogram(stat = "identity") + scale_x_continuous(breaks=3)
ggplot(data=totalStepsByDay, aes(x = factor(date), y =total)) + geom_histogram(stat = "identity")
ggplot(data=totalStepsByDay, aes(x = factor(date), y =total)) + geom_histogram(stat = "identity")+
theme(text = element_text(size=20),
axis.text.x = element_text(angle=90, vjust=1))
averageStepsByinterval<-ddply(dfActivityClean, .(interval), summarize, mean=mean(steps))
averageStepsByinterval<-ddply(dfActivityClean, .(interval), summarize, mean=mean(steps))
maxMeanStep<-max(averageStepsByinterval$mean)
invervalWithMaxStep<-averageStepsByinterval[averageStepsByinterval$mean==maxMeanStep,]$interval
ggplot(data=averageStepsByinterval, aes(x = interval, y =mean)) +  geom_line()+geom_point(data = averageStepsByinterval, aes(x=invervalWithMaxStep, max(mean)), col = 'darkblue',size=5) + geom_text(data = averageStepsByinterval, aes(x=invervalWithMaxStep+250, max(mean), label = "Maximum"),colour='darkblue') + theme(text = element_text(size=20), axis.text.x = element_text(angle=90, vjust=1))
averageStepsByinterval<-ddply(dfActivityClean, .(interval), summarize, mean=mean(steps))
maxMeanStep<-max(averageStepsByinterval$mean)
invervalWithMaxStep<-averageStepsByinterval[averageStepsByinterval$mean==maxMeanStep,]$interval
ggplot(data=averageStepsByinterval, aes(x = interval, y =mean)) +  geom_line()+geom_point(data = averageStepsByinterval, aes(x=invervalWithMaxStep, max(mean)), col = 'darkblue',size=5) + geom_text(data = averageStepsByinterval, aes(x=invervalWithMaxStep+250, max(mean), label = "Maximum"),colour='darkblue')
nrowBefore<-nrow(dfActivity)
nrowBefore
nrowAfter<-nrow(dfActivityClean)
nrowAfter
totalStepsByDayWithNa<-ddply(dfActivity, .(date), summarize, total=sum(steps))
totalStepsByDayWithNa$total<-as.numeric(totalStepsByDayWithNa$total)
totalStepsByDayWithNa$Source<-'NA'
ggplot(data=totalStepsByDayWithNa, aes(x = factor(date), y =total)) + geom_histogram(stat = "identity")
bindData<-rbind(totalStepsByDayWithNa,totalStepsByDay)
ggplot(data=bindData, aes(x = factor(date), y =total,colour = Source,fill=Source)) + geom_histogram(stat = "identity",binwidth=1, position="dodge")+
theme(text = element_text(size=20),
axis.text.x = element_text(angle=90, vjust=1))
ggplot(data=totalStepsByDayWithNa, aes(x = factor(date), y =total)) + geom_histogram(stat = "identity")
bindData<-rbind(totalStepsByDayWithNa,totalStepsByDay)
bindData
ggplot(data=bindData, aes(x = factor(date), y =total,colour = Source,fill=Source)) + geom_histogram(stat = "identity",binwidth=1, position="dodge")
ggplot(data=bindData, aes(x = factor(date), y =total,colour = Source,fill=Source)) + geom_histogram(stat = "identity",binwidth=1, position="dodge") +scale_fill_identity()
ggplot(data=bindData, aes(x = factor(date), y =total,colour = Source,fill=Source)) + geom_histogram(stat = "identity",binwidth=1, position="dodge")
ggplot(data=bindData, aes(x = factor(date), y =total,colour = Source,fill=Source)) + geom_histogram(stat = "identity",binwidth=1, position="dodge") +scale_fill_identity()
ggplot(data=bindData, aes(x = factor(date), y =total,colour = Source,fill=Source)) + geom_histogram(binwidth=1, position="dodge") +scale_fill_identity()
ggplot(data=bindData, aes(x = factor(date), y =total,fill=Source)) + geom_histogram(stat = "identity",binwidth=1, position="dodge") +scale_fill_identity()
ggplot(data=bindData, aes(x = factor(date), y =total,fill=Source)) + geom_histogram(stat = "identity",binwidth=1, position="dodge")
bindData
ggplot(data=bindData, aes(x = date, y =total,fill=Source)) + geom_histogram(stat = "identity",binwidth=1, position="dodge")
totalStepsByDayWithNa
totalStepsByDay
bindData<-rbind(totalStepsByDayWithNa,totalStepsByDay)
bindData
totalStepsByDayWithNa
totalStepsByDay
View(bindData)
bindData2<-rbind(totalStepsByDayWithNa,totalStepsByDay)
bindData2
bindData<-rbind(totalStepsByDayWithNa,totalStepsByDay)
totalStepsByDay
bindData<-rbind(totalStepsByDayWithNa,totalStepsByDay)
bindData
totalStepsByDayWithNa
totalStepsByDay
totalStepsByDay
totalStepsByDayWithNa
totalStepsByDay
totalStepsByDayWithNa
bindData<-rbind(totalStepsByDayWithNa,totalStepsByDay)
bindData
setwd("C:/Users/Roro7_000/Documents/MOOC/Reproducible research/Project1/RepData_PeerAssessment1/activity")
activity<-read.csv('activity.csv',stringsAsFactors=F)
dfActivity<-as.data.frame(activity)
str(dfActivity)
dfActivityClean<-dfActivity[complete.cases(dfActivity),]
head(dfActivityClean)
dfActivityClean$date <- as.Date(format(dfActivityClean$date, format="%Y-%m-%d"))
library(plyr)
totalStepsByDay<-ddply(dfActivityClean, .(date), summarize, total=sum(steps))
totalStepsByDay$total<-as.numeric(totalStepsByDay$total)
totalStepsByDay$Source<-'NOT NA'
head(totalStepsByDay)
library(ggplot2)
ggplot(data=totalStepsByDay, aes(x = factor(date), y =total)) + geom_histogram(stat = "identity") + theme(text = element_text(size=20), axis.text.x = element_text(angle=90, vjust=1))
ddply(dfActivityClean, .(date), summarize, total=sum(steps),mean=mean(steps),median=median(steps))
averageStepsByinterval<-ddply(dfActivityClean, .(interval), summarize, mean=mean(steps))
maxMeanStep<-max(averageStepsByinterval$mean)
invervalWithMaxStep<-averageStepsByinterval[averageStepsByinterval$mean==maxMeanStep,]$interval
ggplot(data=averageStepsByinterval, aes(x = interval, y =mean)) +  geom_line()+geom_point(data = averageStepsByinterval, aes(x=invervalWithMaxStep, max(mean)), col = 'darkblue',size=5) + geom_text(data = averageStepsByinterval, aes(x=invervalWithMaxStep+250, max(mean), label = "Maximum"),colour='darkblue')
nrowBefore<-nrow(dfActivity)
nrowAfter<-nrow(dfActivityClean)
missingValueRow<-nrowBefore-nrowAfter
na_count <-sapply(dfActivity, function(y) sum(length(which(is.na(y)))))
print(na_count,type="html")
for(j in 1:nrow(dfActivity)){
if(is.na(dfActivity[j,]$steps)){
#we look at the averageStepsByinterval dataframe to match with the coresponding interval value
dfActivity[j,]$steps<-averageStepsByinterval[averageStepsByinterval$interval==dfActivity[j,]$interval,]$mean
}
}
head(dfActivity)
totalStepsByDayWithNa<-ddply(dfActivity, .(date), summarize, total=sum(steps))
totalStepsByDayWithNa$total<-as.numeric(totalStepsByDayWithNa$total)
totalStepsByDayWithNa$Source<-'NA'
ggplot(data=totalStepsByDayWithNa, aes(x = factor(date), y =total)) + geom_histogram(stat = "identity")
bindData<-rbind(totalStepsByDayWithNa,totalStepsByDay)
ggplot(data=bindData, aes(x = date, y =total,fill=Source)) + geom_histogram(stat = "identity",binwidth=1, position="dodge")
totalStepsByDayWithNa
totalStepsByDay
totalStepsByDayWithNa
totalStepsByDay
bindData
totalStepsByDayWithNa
totalStepsByDay$date<-as.Date(totalStepsByDay$date)
bindData<-rbind(totalStepsByDayWithNa,totalStepsByDay)
bindData
str(totalStepsByDayWithNa)
str(totalStepsByDay)
dfActivity[,"day"] <-apply(dfActivity, 1, function(x) if(weekdays(as.Date(x[2])) %in% c("lundi","mardi","mercredi","jeudi","vendredi")){ "weekday"}else{"weekend"})
final<-ddply(dfActivity, .(interval,day), summarize, mean=mean(steps))
ggplot(data=final, aes(x = interval, y =mean)) +  geom_line()  + facet_wrap(~ day)+
theme(text = element_text(size=20),
axis.text.x = element_text(angle=90, vjust=1))
final<-ddply(dfActivity, .(interval), summarize, mean=mean(steps))
ggplot(data=final, aes(x = interval, y =mean)) +  geom_line()  + facet_wrap(~ day)+
theme(text = element_text(size=20),
axis.text.x = element_text(angle=90, vjust=1))
ggplot(data=final, aes(x = interval, y =mean)) +  geom_line() +
theme(text = element_text(size=20),
axis.text.x = element_text(angle=90, vjust=1))
final<-ddply(dfActivity, .(interval,day), summarize, mean=mean(steps))
ggplot(data=final, aes(x = interval, y =mean)) +  geom_line()  + facet_wrap(~ day)+
theme(text = element_text(size=20),
axis.text.x = element_text(angle=90, vjust=1))
totalStepsByDayWithNa
names(totalStepsByDayWithNa)
names(totalStepsByDay)
row.names(totalStepsByDayWithNa) <- NULL
totalStepsByDayWithNa
row.names(totalStepsByDayWithNa)
bindData<-rbind(totalStepsByDayWithNa,totalStepsByDay)
bindData
totalStepsByDay
str(totalStepsByDayWithNa)
str(totalStepsByDay)
totalStepsByDayWithNa$date<-as.Date(totalStepsByDayWithNa$date)
str(totalStepsByDay)
str(totalStepsByDayWithNa)
rbind(totalStepsByDayWithNa,totalStepsByDay)
ggplot(data=bindData, aes(x = date, y =total,fill=Source)) + geom_histogram(stat = "identity",binwidth=1, position="dodge")
bindData
rbind(totalStepsByDayWithNa,totalStepsByDay)
toto<-rbind(totalStepsByDayWithNa,totalStepsByDay)
toto
dataMerged<-rbind(totalStepsByDayWithNa,totalStepsByDay)
dataMerged
ggplot(data=dataMerged, aes(x = date, y =total,fill=Source)) + geom_histogram(stat = "identity",binwidth=1, position="dodge")
head(totalStepsByDayWithNa)
ddply(dfActivity, .(date), summarize, total=sum(steps),mean=mean(steps),median=median(steps))
ggplot(data=totalStepsByDay, aes(x = date, y =total)) + geom_histogram(stat = "identity") + theme(text = element_text(size=20), axis.text.x = element_text(angle=90, vjust=1))
